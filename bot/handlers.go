package bot

import (
	"fmt"
	"log"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"github.com/orsenkucher/schedulebot/fbclient"
)

func handleMessage(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	// // Do nothing
	// msg := tgbotapi.NewMessage(update.Message.Chat.ID, update.Message.Text)
	// if _, err := bot.Send(msg); err != nil {
	// 	log.Panic(err)
	// }
}

func handleCommand(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	switch update.Message.Command() {
	case "sub", "start", "go":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã–±–µ—Ä–∏ —Å–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µüëáüèª") // ‚¨áÔ∏è üéì üëáüèª
		msg.ReplyMarkup = inlineKeyboard
		if _, err := bot.Send(msg); err != nil {
			log.Panic(err)
		}
	case "reset", "unsub":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID,
			"–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–ø–∏—Å–∫–∏ ("+update.Message.Chat.FirstName+")") // Unsub options ("+update.Message.Chat.FirstName+")"
		msg.ReplyMarkup = inlineResetKeyboard
		fmt.Println("Doing reset for user", update.Message.Chat.ID)
		if _, err := bot.Send(msg); err != nil {
			log.Panic(err)
		}
	default:
		return
	}
}

func handleCallback(
	bot *tgbotapi.BotAPI,
	update tgbotapi.Update,
	chans map[string]chan SubEvent) {
	data := update.CallbackQuery.Data
	chatID := update.CallbackQuery.Message.Chat.ID
	scheduleName := strings.Split(data, ":")[1]
	ch, ok := chans[scheduleName]
	if ok {
		switch {
		case strings.Contains(data, "sub"):
			fmt.Println(data)
			go sendOnChan(ch, SubEvent{Action: Add, ChatID: chatID})
			fbclient.AddSubscriber(chatID, scheduleName)
			// snackMsg := "Our congrats ü•Ç. We handled your sub!"
			// –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –±–æ—Ç–∞! –î–æ —Å–∫–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á –Ω–∞ –ø–∞—Ä–µ!
			snackMsg := "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ \"" + cmdMapping[data] + "\". –£–≤–∏–¥–∏–º—Å—è –Ω–∞ –ø–∞—Ä–µ ü•Ç"
			// snackMsg := "–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ ü•Ç (" + cmdMapping[data] + ")"
			bot.AnswerCallbackQuery(tgbotapi.NewCallback(update.CallbackQuery.ID, snackMsg))
			msg := tgbotapi.NewMessage(chatID, snackMsg)
			if _, err := bot.Send(msg); err != nil {
				log.Println(err)
			}
		case strings.Contains(data, "reset"):
			fmt.Println(data)
			go sendOnChan(ch, SubEvent{Action: Del, ChatID: chatID})
			fbclient.DeleteSubscriber(chatID, scheduleName)
			// snackMsg := "UnÔ∏èsubscribed ‚ôªÔ∏è" // ‚ò†Ô∏è
			snackMsg := "–û—Ç–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞ ‚ôªÔ∏è (" + cmdMapping[data] + ")"
			bot.AnswerCallbackQuery(tgbotapi.NewCallback(update.CallbackQuery.ID, snackMsg))
			msg := tgbotapi.NewMessage(chatID, snackMsg)
			if _, err := bot.Send(msg); err != nil {
				log.Println(err)
			}
		}
	}
}
